diff --git a/src/services/movie.service.js b/src/services/movie.service.js
index a9b3ff6..057bfdb 100644
--- a/src/services/movie.service.js
+++ b/src/services/movie.service.js
@@ -2,9 +2,9 @@ import { goodfellas, popular } from '../../test/fixtures/movies.js'
 import { roles } from '../../test/fixtures/people.js'
 import { toNativeTypes } from '../utils.js'
 import NotFoundError from '../errors/not-found.error.js'

-// TODO: Import the `int` function from neo4j-driver
+// Import the `int` function from neo4j-driver
+import { int } from 'neo4j-driver'

 export default class MovieService {
   /**
@@ -40,12 +40,39 @@ export default class MovieService {
    */
   // tag::all[]
   async all(sort = 'title', order = 'ASC', limit = 6, skip = 0, userId = undefined) {
-    // TODO: Open an Session
-    // TODO: Execute a query in a new Read Transaction
-    // TODO: Get a list of Movies from the Result
-    // TODO: Close the session
-
-    return popular
+    // Open an Session
+    const session = this.driver.session()
+
+    // tag::allcypher[]
+    // Execute a query in a new Read Transaction
+    const res = await session.executeRead(
+      tx => tx.run(
+        `
+          MATCH (m:Movie)
+          WHERE m.\`${sort}\` IS NOT NULL
+          RETURN m {
+            .*
+          } AS movie
+          ORDER BY m.\`${sort}\` ${order}
+          SKIP $skip
+          LIMIT $limit
+        `, { skip: int(skip), limit: int(limit) })
+    )
+    // end::allcypher[]
+
+    // tag::allmovies[]
+    // Get a list of Movies from the Result
+    const movies = res.records.map(
+      row => toNativeTypes(row.get('movie'))
+    )
+    // end::allmovies[]
+
+    // Close the session
+    await session.close()
+
+    // tag::return[]
+    return movies
+    // end::return[]
   }
   // end::all[]
